// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: karpenter.proto

package karpenterprovidergrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KarpenterService_ListInstances_FullMethodName   = "/karpenterprovidergrpc.KarpenterService/ListInstances"
	KarpenterService_AddInstances_FullMethodName    = "/karpenterprovidergrpc.KarpenterService/AddInstances"
	KarpenterService_RemoveInstances_FullMethodName = "/karpenterprovidergrpc.KarpenterService/RemoveInstances"
)

// KarpenterServiceClient is the client API for KarpenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KarpenterServiceClient interface {
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	AddInstances(ctx context.Context, in *AddInstancesRequest, opts ...grpc.CallOption) (*AddInstancesResponse, error)
	RemoveInstances(ctx context.Context, in *DeleteInstancesRequest, opts ...grpc.CallOption) (*DeleteInstancesResponse, error)
}

type karpenterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKarpenterServiceClient(cc grpc.ClientConnInterface) KarpenterServiceClient {
	return &karpenterServiceClient{cc}
}

func (c *karpenterServiceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, KarpenterService_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karpenterServiceClient) AddInstances(ctx context.Context, in *AddInstancesRequest, opts ...grpc.CallOption) (*AddInstancesResponse, error) {
	out := new(AddInstancesResponse)
	err := c.cc.Invoke(ctx, KarpenterService_AddInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *karpenterServiceClient) RemoveInstances(ctx context.Context, in *DeleteInstancesRequest, opts ...grpc.CallOption) (*DeleteInstancesResponse, error) {
	out := new(DeleteInstancesResponse)
	err := c.cc.Invoke(ctx, KarpenterService_RemoveInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KarpenterServiceServer is the server API for KarpenterService service.
// All implementations must embed UnimplementedKarpenterServiceServer
// for forward compatibility
type KarpenterServiceServer interface {
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	AddInstances(context.Context, *AddInstancesRequest) (*AddInstancesResponse, error)
	RemoveInstances(context.Context, *DeleteInstancesRequest) (*DeleteInstancesResponse, error)
	mustEmbedUnimplementedKarpenterServiceServer()
}

// UnimplementedKarpenterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKarpenterServiceServer struct {
}

func (UnimplementedKarpenterServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedKarpenterServiceServer) AddInstances(context.Context, *AddInstancesRequest) (*AddInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstances not implemented")
}
func (UnimplementedKarpenterServiceServer) RemoveInstances(context.Context, *DeleteInstancesRequest) (*DeleteInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstances not implemented")
}
func (UnimplementedKarpenterServiceServer) mustEmbedUnimplementedKarpenterServiceServer() {}

// UnsafeKarpenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KarpenterServiceServer will
// result in compilation errors.
type UnsafeKarpenterServiceServer interface {
	mustEmbedUnimplementedKarpenterServiceServer()
}

func RegisterKarpenterServiceServer(s grpc.ServiceRegistrar, srv KarpenterServiceServer) {
	s.RegisterService(&KarpenterService_ServiceDesc, srv)
}

func _KarpenterService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarpenterServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KarpenterService_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarpenterServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KarpenterService_AddInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarpenterServiceServer).AddInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KarpenterService_AddInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarpenterServiceServer).AddInstances(ctx, req.(*AddInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KarpenterService_RemoveInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KarpenterServiceServer).RemoveInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KarpenterService_RemoveInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KarpenterServiceServer).RemoveInstances(ctx, req.(*DeleteInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KarpenterService_ServiceDesc is the grpc.ServiceDesc for KarpenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KarpenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "karpenterprovidergrpc.KarpenterService",
	HandlerType: (*KarpenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInstances",
			Handler:    _KarpenterService_ListInstances_Handler,
		},
		{
			MethodName: "AddInstances",
			Handler:    _KarpenterService_AddInstances_Handler,
		},
		{
			MethodName: "RemoveInstances",
			Handler:    _KarpenterService_RemoveInstances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "karpenter.proto",
}
